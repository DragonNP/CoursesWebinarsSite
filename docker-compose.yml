services:
  rabbitmq:
    image: rabbitmq:3.12.2-management
    container_name: rabbitmq
    hostname: rabbitmq
    env_file:
      - .env
    volumes:
      - /home/nikita/docker-containers/rabbitmq:/var/lib/rabbitmq
      - /home/nikita/docker-containers/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - /home/nikita/docker-containers/rabbitmq/advanced.config:/etc/rabbitmq/advanced.config
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: always

  courses_webinars_web:
    build:
      context: .
    container_name: courses_webinars_web
    hostname: courses_webinars_web
    ports:
      - "8000:8000"
    env_file:
      - .env
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    restart: always
    depends_on:
      - celery_worker

  celery_worker:
    build:
      context: .
    container_name: celery_worker
    hostname: celery_worker
    env_file:
      - .env
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=info --concurrency=1
    restart: always
    depends_on:
      - rabbitmq

  celery_flower:
    build:
      context: .
    container_name: celery_flower
    hostname: celery_flower
    env_file:
      - .env
    entrypoint: celery
    command: -A celery_app.app flower --loglevel=info --conf="./courses_webinars/flowerconfig.py"
    ports:
      - "5555:5555"
    restart: always
    depends_on:
      - rabbitmq
      - celery_worker